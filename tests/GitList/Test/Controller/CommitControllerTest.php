<?php

namespace GitList\Test\Controller;

use Silex\WebTestCase;
use Symfony\Component\Filesystem\Filesystem;
use Gitter\Client;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-22 at 20:17:55.
 */
class CommitControllerTest
    extends WebTestCase
{
    protected static $tmpdir;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public static function setUpBeforeClass()
    {
        if (getenv('TMP')) {
            self::$tmpdir = getenv('TMP');
        } elseif (getenv('TMPDIR')) {
            self::$tmpdir = getenv('TMPDIR');
        } else {
           self::$tmpdir = '/tmp';
        }

        self::$tmpdir .= '/gitlist_' . md5(time() . mt_rand()) . '/';
        
        $fs = new Filesystem();
        $fs->mkdir(self::$tmpdir);

        if (!is_writable(self::$tmpdir)) {
            $this->markTestSkipped('There are no write permissions in order to create test repositories.');
        }

        $options['path'] = getenv('GIT_CLIENT') ?: '/usr/bin/git';
        $options['hidden'] = array(self::$tmpdir . '/hiddenrepo');
        $git = new Client($options);

        // GitTest repository fixture
        $git->createRepository(self::$tmpdir . 'GitTest');
        $repository = $git->getRepository(self::$tmpdir . 'GitTest');
        file_put_contents(self::$tmpdir . 'GitTest/README.md', "## GitTest\nGitTest is a *test* repository!");
        file_put_contents(self::$tmpdir . 'GitTest/test.php', "<?php\necho 'Hello World'; // This is a test");
        $repository->setConfig('user.name', 'Luke Skywalker');
        $repository->setConfig('user.email', 'luke@rebel.org');
        $repository->addAll();
        $repository->commit("Initial commit");
        $repository->createBranch('issue12');
        $repository->createBranch('issue42');

        // foobar repository fixture
        $git->createRepository(self::$tmpdir . 'foobar');
        $repository = $git->getRepository(self::$tmpdir . '/foobar');
        file_put_contents(self::$tmpdir . 'foobar/bar.json', "{\n\"name\": \"foobar\"\n}");
        file_put_contents(self::$tmpdir . 'foobar/.git/description', 'This is a test repo!');
        $fs->mkdir(self::$tmpdir . 'foobar/myfolder');
        $fs->mkdir(self::$tmpdir . 'foobar/testfolder');
        file_put_contents(self::$tmpdir . 'foobar/myfolder/mytest.php', "<?php\necho 'Hello World'; // This is my test");
        file_put_contents(self::$tmpdir . 'foobar/testfolder/test.php', "<?php\necho 'Hello World'; // This is a test");
        $repository->setConfig('user.name', 'Luke Skywalker');
        $repository->setConfig('user.email', 'luke@rebel.org');
        $repository->addAll();
        $repository->commit("First commit");
    }

   
    public static function tearDownAfterClass()
    {
        $fs = new Filesystem();
        $fs->remove(self::$tmpdir);
    }

    public function createApplication()
    {
        $app = require 'boot.php';
        $app['debug'] = true;
        $app['git.repos'] = self::$tmpdir;
        return $app;
    }
    
    /**
     * @covers GitList\Controller\CommitController::connect
     */
    public function testBlamePage()
    {
        $client = $this->createClient();

        $crawler = $client->request('GET', '/GitTest/blame/master/test.php');
        $this->assertTrue($client->getResponse()->isOk());
        $this->assertCount(1, $crawler->filter('.source-header .meta:contains("test.php")'));
        $this->assertRegexp('/\/GitTest\/commit\/[a-zA-Z0-9%]+\//', $crawler->filter('.blame-view .commit')->eq(0)->filter('a')->attr('href'));

        $crawler = $client->request('GET', '/foobar/blame/master/bar.json');
        $this->assertTrue($client->getResponse()->isOk());
        $this->assertCount(1, $crawler->filter('.source-header .meta:contains("bar.json")'));
        $this->assertRegexp('/\/foobar\/commit\/[a-zA-Z0-9%]+\//', $crawler->filter('.blame-view .commit')->eq(0)->filter('a')->attr('href'));
    }

    /**
     * @covers GitList\Controller\CommitController::connect
     */
    public function testHistoryPage()
    {

        $client = $this->createClient();

        $crawler = $client->request('GET', '/GitTest/commits/master/test.php');
        $this->assertTrue($client->getResponse()->isOk());
        $this->assertEquals('Initial commit', $crawler->filter('.table tbody tr td h4')->eq(0)->text());

        $crawler = $client->request('GET', '/GitTest/commits/master/README.md');
        $this->assertTrue($client->getResponse()->isOk());
        $this->assertEquals('Initial commit', $crawler->filter('.table tbody tr td h4')->eq(0)->text());

        $crawler = $client->request('GET', '/foobar/commits/master/bar.json');
        $this->assertTrue($client->getResponse()->isOk());
        $this->assertEquals('First commit', $crawler->filter('.table tbody tr td h4')->eq(0)->text());
    }

    /**
     * @covers GitList\Controller\CommitController::connect
     */
    public function testCommitsPage()
    {
        $client = $this->createClient();

        $crawler = $client->request('GET', '/GitTest/commits');
        $this->assertTrue($client->getResponse()->isOk());
        $this->assertEquals('Initial commit', $crawler->filter('.table tbody tr td h4')->eq(0)->text());

        $crawler = $client->request('GET', '/foobar/commits');
        $this->assertTrue($client->getResponse()->isOk());
        $this->assertEquals('First commit', $crawler->filter('.table tbody tr td h4')->eq(0)->text());
    }
}
